{"version":3,"sources":["components/gridConfig.js","components/Grid.jsx","components/Chart.jsx","utils/index.js","pages/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["columns","dataField","text","sort","sortFunc","a","b","order","rowA","rowB","nameA","Date","timestamp","nameB","defaultSorted","rowStyle","row","rowIndex","style","index","parseInt","aqi","backgroundColor","Grid","data","setSelectedCity","rowEvents","onClick","e","city","className","keyField","Chart","historicalData","selectedCity","chartData","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","timeSince","date","seconds","Math","floor","interval","ws","WebSocket","HomePage","useState","setData","setHistoricalData","onopen","console","log","onmessage","evt","updatedData","JSON","parse","forEach","ele","parseFloat","toFixed","toString","key","prop","newObj","history","element","push","formattedTime","updateHistory","filter","aitem","find","bitem","concat","onclose","gridProps","chartProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7862383.chunk.js","sourcesContent":["\nexport const columns = [\n    {\n        dataField: \"city\",\n        text: \"City\",\n        sort: true,\n    },\n    {\n        dataField: \"aqi\",\n        text: \"Current AQI\",\n        sort: true,\n    },\n    {\n        dataField: \"formattedTime\",\n        text: \"Last seen\",\n        sort: true,\n        sortFunc: (a, b, order, dataField, rowA, rowB) => {\n            let nameA = new Date(rowA.timestamp);\n            let nameB = new Date(rowB.timestamp);\n\n            if (nameA - nameB > 0) {\n                return -1;\n            }\n            if (nameA - nameB < 0) {\n                return 1;\n            }\n            return 0;\n        },\n    },\n];\nexport const defaultSorted = [\n    {\n        dataField: \"formattedTime\",\n        order: \"desc\",\n    },\n];\n\nexport const rowStyle = (row, rowIndex) => {\n    const style = {};\n    const index = parseInt(row.aqi);\n\n    if (index <= 50) {\n        style.backgroundColor = \"#65ff07\";\n    } else if (50 < index && index <= 100) {\n        style.backgroundColor = \"#c1ff07\";\n    } else if (100 < index && index <= 200) {\n        style.backgroundColor = \"#fff907\";\n    } else if (200 < index && index <= 300) {\n        style.backgroundColor = \"#ffa907\";\n    } else if (300 < index && index <= 400) {\n        style.backgroundColor = \"#ff8607\";\n    } else if (400 < index) {\n        style.backgroundColor = \"#ff0707\";\n    }\n\n    return style;\n};","import React from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { columns, defaultSorted, rowStyle } from \"./gridConfig\";\n\nexport const Grid = ({ data, setSelectedCity }) => {\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      setSelectedCity(row.city);\n    },\n  };\n\n  return (\n    <>\n      <h3 className=\"grid-heading\">Air Quality Monitoring</h3>\n      <BootstrapTable\n        keyField=\"id\"\n        data={data}\n        columns={columns}\n        rowEvents={rowEvents}\n        rowStyle={rowStyle}\n        defaultSorted={defaultSorted}\n      />\n    </>\n  );\n};\n\nexport default Grid;\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nexport const Chart = ({ historicalData, selectedCity }) => {\n  const chartData = historicalData[selectedCity];\n  if (!chartData) return null;\n\n  return (\n    <>\n      <h3 className=\"chart-heading\">{selectedCity}</h3>\n\n      <LineChart\n        width={1000}\n        height={300}\n        data={chartData}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"formattedTime\" />\n        <YAxis />\n        <Tooltip />\n        <Line type=\"monotone\" dataKey=\"aqi\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"formattedTime\" stroke=\"#82ca9d\" />\n      </LineChart>\n    </>\n  );\n};\n\nexport default Chart;\n","\nexport const mergeTwoArrays = (a, b, prop) => {\n    var reduced = a.filter(function (aitem) {\n        return !b.find(function (bitem) {\n            return aitem[prop] === bitem[prop];\n        });\n    });\n    return reduced.concat(b);\n}\n\nexport const timeSince = (date) => {\n    var seconds = Math.floor((new Date() - date) / 1000);\n    var interval = Math.floor(seconds / 31536000);\n    if (interval > 1) {\n        return interval + \" years\";\n    }\n    interval = Math.floor(seconds / 2592000);\n    if (interval > 1) {\n        return interval + \" months\";\n    }\n    interval = Math.floor(seconds / 86400);\n    if (interval > 1) {\n        return interval + \" days\";\n    }\n    interval = Math.floor(seconds / 3600);\n    if (interval > 1) {\n        return interval + \" hours\";\n    }\n    interval = Math.floor(seconds / 60);\n    if (interval >= 1) {\n        return interval + \" minutes\";\n    }\n    return Math.floor(seconds) + \" seconds\";\n};\n\nexport const updateHistory = (history, updatedData) => {\n    updatedData.forEach((element) => {\n        const { city, aqi, timestamp } = element;\n\n        history[city]\n            ? history[city].push({\n                aqi,\n                timestamp,\n                formattedTime: timeSince(new Date(timestamp)),\n            })\n            : (history[city] = [\n                { aqi, timestamp, formattedTime: timeSince(new Date(timestamp)) },\n            ]);\n    });\n    return history;\n};","import React, { useState } from \"react\";\nimport { Grid } from \"../components/Grid\";\nimport { Chart } from \"../components/Chart\";\nimport { mergeTwoArrays, timeSince, updateHistory } from \"../utils\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst ws = new WebSocket(\"ws://city-ws.herokuapp.com/\");\n\nexport const HomePage = () => {\n  const [data, setData] = useState([]);\n  const [historicalData, setHistoricalData] = useState({});\n  const [selectedCity, setSelectedCity] = useState(\"\");\n\n  ws.onopen = () => {\n    console.log(\"Connected\");\n  };\n\n  ws.onmessage = (evt) => {\n    const updatedData = JSON.parse(evt.data);\n    updatedData.forEach((ele) => {\n      ele.aqi = parseFloat(ele.aqi).toFixed(2);\n      ele.timestamp = new Date().toString();\n      ele.key = `${ele.city}`;\n    });\n\n    const newObj = updateHistory({ ...historicalData }, updatedData);\n    setHistoricalData(newObj);\n\n    setData(mergeTwoArrays(data, updatedData, \"city\"));\n  };\n\n  ws.onclose = () => {\n    console.log(\"disconnected\");\n  };\n\n  const gridProps = {\n    data,\n    setSelectedCity,\n  };\n\n  const chartProps = {\n    historicalData,\n    selectedCity,\n  };\n\n  data.forEach((ele) => {\n    ele.formattedTime = timeSince(new Date(ele.timestamp));\n  });\n  return (\n    <div>\n      <Chart {...chartProps} />\n      <Grid {...gridProps} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import \"./App.css\";\nimport HomePage from \"./pages\";\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}